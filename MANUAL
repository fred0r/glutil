glutil can perform IO operations on glFTPd binary logs (any vanilla 
binary file you can find in /logs folder), based on advanced filtering 
methods. Aside from that, it has 'hooks' which you can use to capture 
data from binary logs and pass it to the shell. 

Log's <field>'s are referenced using static variable names.

<field> is accepted by --[i]regex[i], --[i]match, --[i]lom, 
 --sort and --[pre|post|loop]exec (see --help)

Mind, that whenever passing arguments to --[..]exec, {} needs to be
used around variables (e.g. {dir}, {time}, ...) 

TYPES:
 
  S = string
  I = integer
  F = float

|  FIELD  | TYPE |  DESCRIPTION                                       |
+---------+------+----------------------------------------------------+
; GLOBAL (applies to most logs and to other stuff)

   exe        S     Absolute path to self
   procid     S     Self process id
   ipc        S     glFTPd's IPC key set in system (or glutil)
   glroot     S     glFTPd root path
   siteroot   S     glFTPd site root path
   ftpdata    S     glFTPd data path
   logroot    S     Absolute path to logs folder
   logfile    S     glutil log file path
   imdbfile   S     iMDB log path
   tvragefile S     TVRAGE log path
   nukestr    S     glFTPd nuke string extracted from glftpd.conf
  
; FILESYSTEM

   path       S     Full path
   size       S     Size of file, in bytes
   mode       S     0 = Undefined, 1 = File, 2 = Dir, 3 = Symlink, 4 = Block, 5 = FIFO
  
; DIRLOG

   dir        S     The name of the dir (fullpath)
   mode       S     0 = Undefined, 1 = File, 2 = Dir, 3 = Symlink, 4 = Block, 5 = FIFO
   basedir    S     The name of the dir (basepath)
   status     I     0 = NEWDIR, 1 = NUKE, 2 = UNNUKE, 3 = DELETED
   time       I     Creation time since epoch (man 2 time)
   user       I     The userid of the creator
   group      I     The groupid of the primary group of the creator
   files      I     The number of files inside the dir
   size       I     The number of bytes in the dir   


; NUKELOG

   dir        S     The dirname (fullpath)
   mode       S     0 = Undefined, 1 = File, 2 = Dir, 3 = Symlink, 4 = Block, 5 = FIFO
   status     I     0 = NUKED, 1 = UNNUKED
   time       I     The nuke time since epoch (man 2 time)
   nuker      S     The name of the nuker
   unnuker    S     The name of the unnuker
   nukee      S     The name of the nukee
   mult       I     The nuke multiplier
   size       F     The number of bytes nuked
   reason     S     The nuke reason


; DUPEFILE
 
   filename   S     The file name
   mode       S     0 = Undefined, 1 = File, 2 = Dir, 3 = Symlink, 4 = Block, 5 = FIFO
   time       I     Creation time since epoch (man 2 time)
   user       S     The name of the uploader


; LASTONLOG
 
   user       S     Username
   group      S     Users primary group
   tag        S     Users tagline
   logon      I     Users logon time
   logoff     I     Users logoff time
   upload     I     Bytes uploaded
   download   I     Bytes downloaded
   stats      S     What did the user do ?


; ONLINER
   
   user       S     The user that added the oneliner
   group      S     The primary group of the user who added the oneliner
   tag        S     The tagline of the user who added the oneliner
   time       I     The time the message was added (epoch)
   msg        S     The message (oneliner)


; ONLINE (shared memory segment)

   user       S     The username of the user
   tag        S     The users tagline
   time       I     The login time since the epoch (man 2 time)
   status     I     The status of the user, idle, RETR, etc
   host       S     The host the user is comming from (with ident)
   dir        S     The users current dir (fullpath)
   ssl        I     0 = no ssl, 1 = ssl on control, 2 = ssl on control and data
   group      I     The groupid of the users primary group
   pid        I     The processor id of the process
   lupdtime   I     Last update time since epoch (man 2 time)
   lxfertime  I     The time of the last succesfull transfer
   bxfer      I     Bytes transferred so far
   btxfer     I     Bytes transferred in the last loop (speed limiting)
   rate       I     Transfer rate in B/s, calculated from bxfer and lupdtime
   
; glutil specific: 
 
; IMDB
 
   dir        S     The directory name related to record
   mode       S     0 = Undefined, 1 = File, 2 = Dir, 3 = Symlink, 4 = Block, 5 = FIFO
   basedir    S     The directory name related to record (basepath)
   time       I     Creation time since epoch (man 2 time)
   imdbid     S     iMDB object ID
   score      F     iMDB score
   votes      I     iMDB votes
   genres     S     Listed genres
   rated      S     Rating
   title      S     Title
   director   S     Director
   actors     S     Actors
   released   I     Released time since epoch (man 2 time)
   runtime    I     Runtime 
   year       S     Year of release


; TVRAGE
 
   dir        S     The directory name related to record
   mode       S     0 = Undefined, 1 = File, 2 = Dir, 3 = Symlink, 4 = Block, 5 = FIFO
   time       I     Creation time since epoch (man 2 time)
   showid     I     TVRAGE show id
   name       S     Show name
   link       S     TVRAGE link to show
   country    S     Country of origin
   airtime    S     Airing time
   airday     S     Air day of the week
   runtime    I     Show runtime in minutes
   started    I     Show starting time since epoch
   ended      I     Show ended time since epoch         
   seasons    I     Total number of seasons
   class      S     Show classification
   genres     S     Show genres
   status     S     Show status


; GAME
 
   dir        S     The directory name related to record
   mode       S     0 = Undefined, 1 = File, 2 = Dir, 3 = Symlink, 4 = Block, 5 = FIFO
   time       I     Creation time since epoch (man 2 time)
   score      F     Game score
   
; GENERIC-1 (ge1)

   i32        I     32-bit integer field
   ge1        S     255 byte signed character field
   ge2        S     -||-
   ge3        S     -||-
   ge4        S     -||-
   ge5        S     -||-
   ge6        S     -||-
   ge7        S     -||-
   ge8        S     -||-
  
  
  
MAIN INPUT/OUTPUT OPERATIONS:


* Parse/dump:

	Read-only mode (operators:  -d, -n, -i, -l, -o, -w, -a, -k, -h, -q)
	
	This mode loads selected binary log into process memory pages or shared mem segment (--shmem) and 
	displays the data in either normal (synopsis), --batch (full, tab delimited) or --raw (binary) formats.
	
	
	--nobuffer turns memory buffering off and directly reads record by record using C native IO procedures (fread)	
	
	Using --shmem, shared memory pages are used instead of locally allocated memory - loading there allows to
	keep log data cached in memory, where other instances can access it thus avoiding having to allocate theirown
	pages and filing them with the actual log data from filesystem. 
	
	Shared segment should be updated promply whenever log data on disk changes;
	
	When the segment that belongs to a log file is non-existant, it's automatically created and filled with data.
	If glutil detects log data file size is different from segment size or --shmdestroy is present, it automatically 
	destroys the segment, forcing glutil to reallocate and reload it immediatelly after. 
	
	If data log size matches segment size and the segment exists, glutil will proceed using the segment as the data
	buffer for all operations.
	
	All match/hook operators apply.	
	
* Write:

	Write mode (operator: -z <logname> [--infile=/path/file])
	 
	Used to write one or more data log (specified by <logname>) records from a regular ASCII text file (see README
	for examples).
	
	If --infile=<filename> is not set, stdin is expected to hold the input data.
	
	All match/hook operators apply.
	
* Rebuild:

	Rebuild mode (operator: -e <logname>)
	
	Data is loaded into memory, passed via filters/hooks, then written back to log file.
	
	This is basically just for convinience, the same can be accomplished using --raw in parse mode and redirecting
	stdout back to log file;
	
	For example:
	
		glutil -d --regexi dir,"Smallville" or --lom "size == 0 || files == 0" --raw > /glftpd/ftp-data/logs/dirlog
		
	would produce the same result as:
	
		glutil -e dirlog --regexi dir,"Smallville" or --lom "size == 0 || files == 0"
		
	These examples would filter any dirlog record including 'Smallville' in directory name (case insentitive) and any 
	directories with size/files zero, writing results back to data log.
	Using 'and' instead of 'or' between the match operators, would filter only stuff with both Smallvile in directory 
	name and of size 0.
	
	There are however some advantages to using parsing operators with --raw, which are not available during rebuild mode;
	
	When in rebuild mode (-e), data must be buffered (either locally or in shared mem segment) in order to be processed, 
	so data file size is limited with your RAM capacity (and with --memlimit argument or DB_MAX_SIZE macro in source, 512MB 
	by default).
	However, while parsing (-d, -n, ..), --nobuffer option can be used, turning buffering off and reading record by record 
	using fget. 
	Since glutil is set by default to compile using large file offsets, theoretically, a massive file could be parsed
	(64-bit file size, not taking filesystem limits into account).
	
	All match/hook operators apply.

