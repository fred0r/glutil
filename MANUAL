glutil can perform IO operations on glFTPd binary logs (any vanilla 
binary file you can find in /logs folder), based on advanced filtering 
methods. Aside from that, it has 'hooks' which you can use to capture 
data from binary logs and pass it to the shell. 

Log's <field>'s are referenced using static variable names.

<field> is accepted by --[i]regex[i], --[i]match, --[i]lom, 
 --sort and --[pre|post|loop]exec (see --help)

Mind, that whenever passing arguments to --[..]exec, {} needs to be
used around variables (e.g. {dir}, {time}, ...) 

* NOTE: As of 1.9-34, data log field names are guaranteed to be the
  same when reading and writing. For instance, filtering by a specific
  field (regex,lom,..) takes the same field name argument as textform
  datalog records (used when injecting data into logs, -z).
  Some field names were changed.
  

FLAGS:
 
  S = string
  I = integer
  F = float
  E = extra info (not part of actual data structure)

|  FIELD  | TYPE |  DESCRIPTION                                       |
+---------+------+----------------------------------------------------+
; GLOBAL (applies everywhere)

   exe        S     Absolute path to self
   procid     S     Self process id
   ipc        S     glFTPd's IPC key set in system (or glutil)
   glroot     S     glFTPd root path
   siteroot   S     glFTPd site root path
   ftpdata    S     glFTPd data path
   logroot    S     Absolute path to logs folder
   logfile    S     glutil log file path
   imdbfile   S     iMDB log path
   tvragefile S     TVRAGE log path
   nukestr    S     glFTPd nuke string extracted from glftpd.conf
   memlimit   S     Maximum number of bytes that can be buffered
   glconf     S     Path to glftpd.conf per glconf.h
  
; FILESYSTEM (applies to -x, -d, -n, -a, -h and -k)

   path       S     Full path
   basepath   S     Base path
   size       S     Total size, in bytes
   mode       I     File type (glutil --info -vv)
   devid      I     ID of device containing file
   inode      I     inode number
   links      I     Number of hard links
   uid        I     User ID of owner
   gid        I     Uroup ID of owner
   blksize    I     Blocksize for filesystem I/O
   atime      I     Time of last access
   mtime      I     Time of last modification
   ctime      I     Time of last status change
   isread     I     1 = Read access, 0 = No read access, -1 = Operation failed
   iswrite    I     1 = Write access, 0 = No write access, -1 = Operation failed
   isexec     I     1 = Execute access, 0 = No execute access, -1 = Operation failed
   uperm      I     User permission octet
   gperm      I     Group permission octet
   operm      I     Others permission octet
   perm       S     File permissions string
  
; DIRLOG

   dir        S     The name of the dir (fullpath)
   mode       ES    File type (glutil --info -vv)
   basedir    ES    The name of the dir (basepath)
   x:<field>  ES    Returns FILESYSTEM info on <dir> (available fields listed above)
   xg:<field> ES    Returns FILESYSTEM info on /glroot/<dir> (available fields listed above)
   status     I     0 = NEWDIR, 1 = NUKE, 2 = UNNUKE, 3 = DELETED
   time       I     Creation time since epoch (man 2 time)
   user       I     The userid of the creator
   group      I     The groupid of the primary group of the creator
   files      I     The number of files inside the dir
   size       I     The number of bytes in the dir   


; NUKELOG

   dir        S     The name of the dir (fullpath)
   basedir    ES    The name of the dir (basepath)
   x:<field>  ES    Returns FILESYSTEM info on <dir> (available fields listed above)
   xg:<field> ES    Returns FILESYSTEM info on /glroot/<dir> (available fields listed above)
   mode       ES    File type (glutil --info -vv)
   status     I     0 = NUKED, 1 = UNNUKED
   time       I     The nuke time since epoch (man 2 time)
   nuker      S     The name of the nuker
   unnuker    S     The name of the unnuker
   nukee      S     The name of the nukee
   mult       I     The nuke multiplier
   size       F     The number of bytes nuked
   reason     S     The nuke reason


; DUPEFILE
 
   file       S     The file name
   time       I     Creation time since epoch (man 2 time)
   user       S     The name of the uploader


; LASTONLOG
 
   user       S     Username
   group      S     Users primary group
   tag        S     Users tagline
   logon      I     Users logon time
   logoff     I     Users logoff time
   upload     I     Bytes uploaded
   download   I     Bytes downloaded
   stats      S     What did the user do ?


; ONLINER
   
   user       S     The user that added the oneliner
   group      S     The primary group of the user who added the oneliner
   tag        S     The tagline of the user who added the oneliner
   time       I     The time the message was added (epoch)
   msg        S     The message (oneliner)


; ONLINE (shared memory segment)

   user       S     The username of the user
   tag        S     The users tagline
   time       I     The login time since the epoch (man 2 time)
   status     I     The status of the user, idle, RETR, etc
   host       S     The host the user is comming from (with ident)
   dir        S     The users current dir (fullpath)
   ssl        I     0 = no ssl, 1 = ssl on control, 2 = ssl on control and data
   group      I     The groupid of the users primary group
   pid        I     The processor id of the process
   lupdtime   I     Last update time since epoch (man 2 time)
   lxfertime  I     The time of the last succesfull transfer
   bxfer      I     Bytes transferred so far
   btxfer     I     Bytes transferred in the last loop (speed limiting)
   rate       I     Transfer rate in B/s, calculated from bxfer and lupdtime
   
; glutil specific: 
 
; IMDB
 
   dir        S     The directory name related to record
   mode       ES    File type (glutil --info -vv)
   basedir    ES    The directory name related to record (basepath)
   x:<field>  ES    Returns FILESYSTEM info on <dir> (available fields listed above)
   xg:<field> ES    Returns FILESYSTEM info on /glroot/<dir> (available fields listed above)
   time       I     Creation time since epoch (man 2 time)
   imdbid     S     iMDB object ID
   score      F     iMDB score
   votes      I     iMDB votes
   genre      S     Listed genres
   rated      S     Rating
   title      S     Title
   director   S     Director
   actors     S     Actors
   released   I     Released time since epoch (man 2 time)
   runtime    I     Runtime 
   year       S     Year of release


; TVRAGE
 
   dir        S     The directory name related to record
   basedir    ES    The name of the dir (basepath)
   x:<field>  ES    Returns FILESYSTEM info on <dir> (available fields listed above)
   xg:<field> ES    Returns FILESYSTEM info on /glroot/<dir> (available fields listed above)
   mode       ES    File type (glutil --info -vv)
   time       I     Creation time since epoch (man 2 time)
   showid     I     TVRAGE show id
   name       S     Show name
   link       S     TVRAGE link to show
   country    S     Country of origin
   airtime    S     Airing time
   airday     S     Air day of the week
   runtime    I     Show runtime in minutes
   started    I     Show starting time since epoch
   ended      I     Show ended time since epoch         
   seasons    I     Total number of seasons
   class      S     Show classification
   genre      S     Show genres
   status     S     Show status


; GAME
 
   dir        S     The directory name related to record
   basedir    ES    The name of the dir (basepath)
   x:<field>  ES    Returns FILESYSTEM info on <dir> (available fields listed above)
   xg:<field> ES    Returns FILESYSTEM info on /glroot/<dir> (available fields listed above)
   mode       ES    File type (glutil --info -vv)
   time       I     Creation time since epoch (man 2 time)
   score      F     Game score
   
; GENERIC-1 (ge1)

   i32        I     32-bit integer field
   ge1        S     255 byte signed character field
   ge2        S     -||-
   ge3        S     -||-
   ge4        S     -||-
   ge5        S     -||-
   ge6        S     -||-
   ge7        S     -||-
   ge8        S     -||-
  
  
  
 MAIN INPUT/OUTPUT OPERATIONS:


 * Parse/dump:

	Read-only mode (operators:  -d, -n, -i, -l, -o, -w, -a, -k, -h, -q)
	
	This mode loads selected binary log into process memory pages or shared mem segment (--shmem) and 
	displays the data in either normal (synopsis), --batch (full, tab delimited) or --raw (binary) formats.
	
	
	--nobuffer turns memory buffering off and directly reads record by record using C native IO procedures (fread)	
	
	Using --shmem, shared memory pages are used instead of locally allocated memory - loading there allows to
	keep log data cached in memory, where other instances can access it thus avoiding having to allocate theirown
	pages and filing them with the actual log data from filesystem. 
		
	When the segment that belongs to a log file is non-existant, it's automatically created and filled with data.
	If glutil detects log data file size is different from segment size or --shmdestroy is present, it automatically 
	destroys the segment, forcing glutil to reallocate and reload it immediatelly after. 
	
	If data log size matches segment size and the segment exists, glutil will proceed using the segment and it's data
	for all operations (segment data is NOT updated).
	
	The user must ensure shared segment be updated promply, whenever log data on disk changes. Even though glutil
	automatically updates the segment when log/segment sizes do not match, it doesn't detect content changes; 
	
		glutil -q <logname> --shmem --shmdestroy --loadq -vv
		
		Load the data into segment (-q, --shmem), force segment be destroyed and re-allocated (--shmdestroy), 
		quit right after loading, don't do anything else (--loadq)
		
		glutil -q <logname> --shmem --shmreload --loadq -vv
	
	All match/hook operators apply.	
	
	
 * Write:

	Write mode (operator: -z <logname> [--infile=/path/file])
	 
	Used to write one or more data log (specified by <logname>) records from a regular ASCII text file (see README
	for examples).
	
	If --infile=<filename> is not set, stdin is expected to hold the input data.
	
	All match/hook operators apply.
	
	
 * Rebuild:

	Rebuild mode (operator: -e <logname>)
	
	Data is loaded into memory, passed via filters/hooks, then written back to log file.
	
	This is basically just for convinience, the same can be accomplished using --raw in parse mode and redirecting
	stdout back to log file;
	
	For example:
	
		glutil -d --regexi dir,"Smallville" or --lom "size == 0 || files == 0" --raw > /glftpd/ftp-data/logs/dirlog
		
	would produce the same result as:
	
		glutil -e dirlog --regexi dir,"Smallville" or --lom "size == 0 || files == 0"
		
	These examples would filter any dirlog record including 'Smallville' in directory name (case insentitive) and any 
	directories with size/files zero, writing results back to data log.
	Using 'and' instead of 'or' between the match operators, would filter only stuff with both Smallvile in directory 
	name and of size 0.
	
	There are however some advantages to using parsing operators with --raw, which are not available during rebuild mode;
	
	When in rebuild mode (-e), data must be buffered (either locally or in shared mem segment) in order to be processed, 
	so data file size is limited with your RAM capacity (and with --memlimit argument or DB_MAX_SIZE macro in source, 512MB 
	by default).
	However, while parsing (-d, -n, ..), --nobuffer option can be used, turning buffering off and reading record by record 
	using fget. 
	Since glutil is set by default to compile with large file offsets, theoretically a massive file could be parsed
	(64-bit file size, not taking filesystem limits into account).
	
	All match/hook operators apply.


 EXTRACTING DATA FROM BINARY LOGS:

   ANY binary log record can easily be extracted as ASCII string and passed 
   to the shell using --exec, --postexec or --preexec (see --help)
   

   Let's assume we want to get the path, number of files and directory  
   creation time out of dirlog, passing these three values for each record 
   to your script:

   ./glutil  -d --silent -exec "/path/to/myscript.sh {dir} {files} {time}"

   --/* myscript.sh: */-----------------------------------------------

   #/bin/bash

   echo $1 $2 $3

   exit 0

   -------------------------------------------------------------------

   Output:

    [x@y bin]$ ./glutil -d --silent -exec "./myscript.sh {dir} {files} {time}"
    ...
    /site/archive/tv-../Sky.Special... 16 1277037362
    /site/archive/tv-.../The.Simpsons.Special... 22 1277037472
    /site/archive/tv-dvdrip/P/Prison.Break/Prison.Break.S02.. 28 1277065247
    ...
   

   Now do the same, but apply a regex filter (--iregex) to dirnames 
   to -exec ONLY what is matched and quit after first match (--imatchq):

    ./glutil -d --silent -exec "./myscript.sh {dir} {files} {time}" --iregex \
    "\/The\.Simpsons" --imatchq

   Output:

    /site/archive/tv-.../The.Simpsons.Special... 22 1277037472
    /site/archive/tv-.../The.Simpsons.S04E05... 21 1277137472


 WRITING RECORDS TO BINARY LOGS:

   ANY binary log can be built, using only proper ASCII formated input

   For this example, let's assume we want to add three new records to
   the dirlog.

  Write records in ASCII form to a temporary file:
  
   --/* adatafile.tmp: */----------------------------------------------

   dir /site/x264/Avengers.1080p.x264-GRP
   user 101
   group 101
   files 49
   size 9437184000
   time 1377307789
   status 0

   dir /site/xvid/Die.Hard.DVDRIP.XViD-GRP
   user 104
   group 105
   files 21
   size 734003200
   time 1377307789
   status 0

   dir /site/xvid/Fast.and.Furious.BRRIP.XViD-GRP
   user 102
   group 103
   files 22
   size 733103100
   time 1377301789
   status 1

   -------------------------------------------------------------------

   All records MUST be delimited by two new lines (\n\n), and the
   last record must be followed by two new lines.
   
   See MANUAL for required record fields (all must be defined).

   Write info held in 'adatafile.tmp' to the dirlog:

    ./glutil -z dirlog < adatafile.tmp

   Assuming there's no ERROR, 3 new records are appended to the data
   file. 
   If you don't want to write to existing dirlog, use path overrides:

    ./glutil -z dirlog --dirlog=/path/to/dirlog.new < adatafile.tmp

 ADDITIONAL LOG TYPES:

   Besides support for glFTPd log types, glutil introduces new log
   types, see /scripts folder for working examples.

   For instance, 'imdb_get.sh' scrapes iMDB info off the web and
   constructs iMDB binary data log, writing movie rating/scores/..
   and the directory path to it.

   iMDB log example usage:

   Say we want to do something with releases (in this case just 'echo'), 
   with a score lower than 5.0, but higher than 0

./glutil -a --ilom="score < 5.0 && score" --exec "echo \">> {title} << is below the score limit {score}/5.0\""

   Display all titles with score higher than 6.0, sort by score ascending:
   
./glutil -a --ilom="score > 6.0" --sort num,asc,score --batch | cut -f 3,6

   Display all titles with score higher than 7.1 of genre Comedy,
   sorted by score ascending:
   
./glutil -a --ilom="score > 7.1" --iregexi genres,".*Comedy.*" --sort num,asc,score --batch | cut -f 3,6

   If you have an idea about what sort of log type may be usefull,
   write to io@nixnodes.net


 FOLDERS FILE (filesystem based dirlog rebuild only):

  To avoid importing junk data into dirlog, a file defined by 'du_fld' macro
  in glutil.c (or at runtime with --folders argument) can be used when 
  running in recursive mode (-r).
  Each line should contain a relative to site root PATH (no / in front or
  back required) and depth to scan at, separated by space.

  Example:

    MP3 2
    TV-XVID 1
    XVID 1
    0DAY 2
    APPS 1
    ARCHIVE/APPS 2
    ARCHIVE/TV-XVID 3


  Depth value defines the exact level of a folder's directory tree, at 
  which the tool imports folders to dirlog, this way, avoiding irrelevant
  entries.

 	For example:

    A daily/weekly sorted release dir structure usually looks like:

     /mp3/0601/some-album-1-la
     /mp3/0601/some-album-2-la
     /mp3/0602/some-other-album-1-la
     ..

    We want to avoid importing /mp3/0602 folder itself into dirlog and
    import only what is inside it.

      MP3 2

    This would NOT import 'mp3/0601/' and 'mp3/0602/' folders, but would 
    import 'some-album-1-la/', 'some-album-2-la/' and 
    'some-other-album-1-la/' .Folders inside 'some-album-..' folders 
    are not imported.

      MP3 1

    This would import '0601/' and '0602/' only, scanning all content
      inside it.

    There's no reason you can't do this:

      MP3 1
      MP3 2

    But in this particular case, having dated folders in there likely
    poses no advantage.

    But maybe you'd want to have individual CD/DVD dirs:

    	XVID 1
    	XVID 2

    This does two passes, one on each directory tree level, 1 does the,
    releases 2 the folders inside them.

  Using -f (force) when recursing ignores the folders file and imports
  every single folder inside gl's site root into your dirlog (scanning
  it for sizes/file counts).

  If folders file is missing, it automatically does full siteroot
  recursion (same as '-f').
  