#@REVISION:66
#
## NOTE: Requires glutil 2.6.2 or higher
#
## These are basically just sets of glutil arguments and 
##  bash commands, packed into macros for convinience
#
## This file needs to be marked executable
#
## Remember, these 'macros' are nothing other than small
## bash snippets, which will not necessarily work on your
## system. Create own macros with functionality specific 
## to what you need.
#
## COMPATIBLE WITH NEWER LINUX ENVIRONMENTS ONLY!!
#
### Run with: ./glutil -m <macro name>
##
## <update-scipts>
#
## Gets glutil scripts from github repo
#
## Scripts are put into /glroot/bin/scripts,
##  folder is created if it doesn't exist
#
#@MACRO:update-scripts|Get glutil scripts from github development repo. Scripts are put into /glroot/bin/scripts, folder is created if it doesn't exist:{exe} -noop --preexec `B="https://raw.githubusercontent.com/nixnodes/glutil/master/scripts/";D="\{glroot\}/bin/scripts/";[ -d "\{glroot\}/bin/scripts" ] || mkdir "\{glroot\}/bin/scripts"; if curl --silent "$B"imdb_get.sh > "$D"imdb_get.sh; then echo -e "$D"imdb_get.sh" \t\tv$(cat "$D"imdb_get.sh | grep @VERSION: | cut -d ":" -f 2).$(cat "$D"imdb_get.sh | egrep "^\#\@REVISION\:" | cut -d ":" -f 2) \tOK"; chmod 755 "$D"imdb_get.sh; else echo "$D"imdb_get.sh" FAILED"; fi; if curl --silent "$B"tvrage_get.sh > "$D"tvrage_get.sh; then echo -e "$D"tvrage_get.sh" \t\tv$(cat "$D"tvrage_get.sh | grep @VERSION: | cut -d ":" -f 2).$(cat "$D"tvrage_get.sh | egrep "^\#\@REVISION\:" | cut -d ":" -f 2) \tOK";  chmod 755 "$D"tvrage_get.sh; else echo "$D"tvrage_get.sh" FAILED"; fi;if curl --silent "$B"killslow.sh > "$D"killslow.sh; then echo -e "$D"killslow.sh" \t\tv$(cat "$D"killslow.sh | grep @VERSION: | cut -d ":" -f 2).$(cat "$D"killslow.sh | egrep "^\#\@REVISION\:" | cut -d ":" -f 2) \tOK"; chmod 755 "$D"killslow.sh; else echo "$D"killslow.sh" FAILED"; fi;if curl --silent "$B"gb_get.sh > "$D"gb_get.sh; then echo -e "$D"gb_get.sh" \t\t\tv$(cat "$D"gb_get.sh | grep @VERSION: | cut -d ":" -f 2).$(cat "$D"gb_get.sh | egrep "^\#\@REVISION\:" | cut -d ":" -f 2) \tOK"; chmod 755 "$D"gb_get.sh; else echo "$D"gb_get.sh" FAILED"; fi; if curl --silent "$B"check_incomplete.sh > "$D"check_incomplete.sh; then echo -e "$D"check_incomplete.sh" \tv$(cat "$D"check_incomplete.sh | grep @VERSION: | cut -d ":" -f 2).$(cat "$D"check_incomplete.sh | egrep "^\#\@REVISION\:" | cut -d ":" -f 2) \tOK"; chmod 755 "$D"check_incomplete.sh; else echo "$D"check_incomplete.sh" FAILED"; fi;  `
#
## <update-macro>
#
## Gets this macro file from github repo 
##  and dumps it into /glroot/bin/misc/,
##  creating the folder if needed
#
#@MACRO:update-macro|Get this macro file from github development repo and dumps it into /glroot/bin/misc/, creating the folder if needed:{exe} -noop --preexec `B="https://raw.githubusercontent.com/nixnodes/glutil/master/misc/";D="\{glroot\}/bin/misc/"; [ -d "\{glroot\}/bin/misc" ] || mkdir "\{glroot\}/bin/misc"; if curl --silent "$B"macros.glutil > "$D"macros.glutil; then echo -e "$D"macros.glutil" \t\t\trev:$(cat "$D"macros.glutil | egrep "^\#\@REVISION\:" | cut -d ":" -f 2) \tOK"; else echo "$D"macros.glutil" FAILED"; fi;` 
#
## <update>
#
## Performs all updates
#
#@MACRO:update|Perform all updates:{exe} -noop --preexec `{exe} -m update-scripts;{exe} -m update-macro`
#
## <dirlog-rebuild>
#
## Rebuilds the dirlog based on glutil.folders file
#
#@MACRO:dirlog-rebuild|Rebuild directory log based on 'glutil.folders':{exe} -r {arg1}
#
#@MACRO:dirlog-rebuild-skipempty|Rebuild directory log based on 'glutil.folders' (skip empty directories):{exe} -r ! -lom "size = 0 && files = 0" {arg1}
#
## <dirlog-full-rebuild>
#
## Rebuilds the dirlog based on glutil.folders file
#
#@MACRO:dirlog-full-rebuild|Rebuild directory log:{exe} -r -v --full {arg1}
#
#@MACRO:dirlog-full-rebuild-skipempty|Rebuild directory log (skip empty directories):{exe} -r --full ! -lom "size = 0 && files = 0" {arg1}
#
## <dirlog-update>
#
## Update directory log with new records and remove 
## records that are missing from filesystem 
#
#@MACRO:dirlog-update|Update directory log with new records and remove records that are missing from filesystem:{exe} -r -u --full --postexec "\{exe\} --check --fix --ghost -v {arg2}" {arg1}
#
#@MACRO:dirlog-update-skipempty|Update directory log with new records and remove records that are missing from filesystem (skip empty directories):{exe} -r -u --full --stats ! -lom "size = 0 && files = 0" --postexec "\{exe\} --check --fix --ghost -v {arg2}" {arg1}
#
## <dirlog-full-update>
#
## Update directory log with new records and remove 
## records that are missing from filesystem (full)
#
#@MACRO:dirlog-full-update|Update directory log with new records and remove records that are missing from filesystem (full):{exe} -r -u --stats --full --postexec "{exe} --check --fix --ghost -v {arg2}" {arg1}
#
#@MACRO:dirlog-full-update-skipempty|Update directory log with new records and remove records that are missing from filesystem (full) (skip empty directories):{exe} -r -u --stats --full --stats ! -lom "size = 0 && files = 0" --postexec "{exe} --check --fix --ghost -v {arg2}" {arg1}
#
## <dirlog-dupe>
#
## Search for duplicates in dirlog, avoiding non-releases
#
#@MACRO:dirlog-dupe|Search for duplicates in dirlog, avoiding non-releases:{exe} -p -l: basedir ! -regexi "^(sample|proof|covers|booklet|subs|cover|CD[0-9]\{1,3\}|dvd[0-9]\{1,3\})$|.*( COMPLETE ).*" {arg1}
#
## <dirlog-dupe-v>
#
## Same, with progress stats
#
#@MACRO:dirlog-dupe-v|Search for duplicates in dirlog, avoiding non-releases (with progress stats):{exe} -p -l: basedir ! -regexi "(sample|proof|booklet|covers|subs|cover|CD[0-9]\{1,3\}|dvd[0-9]\{1,3\})$|.*( COMPLETE ).*" {arg1} -v
#
## <make-tvrage-dirlinks>
#
## Creates symlinks inside respective folders for every imdb/tv log record,
## erasing any existing ones first; 
#
## Examples:
#
#   ../[ TVRAGE - Scripted - Comedy,Family ] 
#   ../[ IMDB - 7.5 | 300415 - Action, Comedy, Adventure ] 
#
## Requires logs built with DATABASE_TYPE=0 (see tvrage/imdb_get.sh)
#
#@MACRO:tvrage-make-infolinks|Creates folders with release info inside respective folders for every tvlog record erasing any existing ones first:{exe} --tvlog={?q:tvrage@file} -h --silent -exec `rm "\{glroot\}\{dir\}/[ TVRAGE "*;mkdir "\{glroot\}\{dir\}/[ TVRAGE - \{class\} - \{genres\} ]"` {arg1}
#
## <make-imdb-dirlinks>
#
#@MACRO:imdb-make-infolinks|Creates folders with release info inside respective folders for every imdblog record erasing any existing ones first:{exe} --imdblog={?q:imdb@file} -a --silent -exec `rm "{glroot}\{dir\}/[ IMDB "*;mkdir "\{dir\}" "\{glroot\}\{dir\}/[ IMDB - \{score\} | \{votes\} votes - \{genres\} ]"` {arg1}
#
##
#@MACRO:tvrage-to-sql:{exe} -h --tvlog={?q:tvrage@file} --silent -print "insert into TVRAGE.shows (name, link, country, started, ended, seasons, status, runtime, airtime, airday, class, genres, showid, time, network, dir, startyear, endyear) VALUES('\{name\}', '\{link\}', '\{country\}', '\{started\}', '\{ended\}', '\{seasons\}', '\{status\}', '\{runtime\}', '\{airtime\}', '\{airday\}', '\{class\}', '\{genres\}', '\{showid\}', '\{time\}', '\{network\}', '\{dir\}', '\{startyear\}', '\{endyear\}');" 
#
## <dirlog-clean-dupes>
#
## Erase duplicate records in dirlog
#
## The first record found is ignored, any other with
## the same base directory name are removed.
#
## Use <dirlog-clean-dupes-rm> to get rid of filesystem
## directories
#
## This can take a long time, depending on the log size
#
#@MACRO:dirlog-clean-dupes|Erase duplicate records in dirlog; Requires glutil-1.9-9 or above:{exe} -d --dirlog={?q:dirlog@file} --preexec `{exe} --dirlog={?q:dirlog@file} --backup dirlog -vv` -execv `{exe} -e dirlog --dirlog={?q:dirlog@file} -l: basedir ! -match "\{basedir\}" --nofq --loglevel=6 --ifhit --nobackup` -l: dir ! -regexi "\/(sample|proof|booklet|covers|subs|cover|CD[0-9]\{1,3\}|dvd[0-9]\{1,3\})$|.*( COMPLETE ).*" --silent
#@MACRO:dupefile-clean-dupes|Erase duplicate records in dupelog; Requires glutil-1.9-9 or above:{exe} -i --dupefile={?q:dupefile@file} --preexec `{exe} --dupefile={?q:dupefile@file} --backup dupefile -vv` -execv `{exe} -e dupefile --dupefile={?q:dupefile@file} -l: file ! -match "\{file\}" --nofq --loglevel=6 --ifhit --nobackup` --silent
#@MACRO:imdb-clean-dupes|Erase duplicate records in imdblog; Requires glutil-1.9-9 or above:{exe} -a --imdblog={?q:imdb@file} --preexec `{exe} --imdblog={?q:imdb@file} --backup imdb -vv` -execv `{exe} -e imdb --imdblog={?q:imdb@file} -l: basedir ! -match "\{basedir\}" --nofq --loglevel=6 --ifhit --nobackup` --silent
#@MACRO:imdb-clean-dupes-id|Erase duplicate imdbID records in imdblog; Requires glutil-1.9-9 or above:{exe} -a --imdblog={?q:imdb@file} --preexec `{exe} --imdblog={?q:imdb@file} --backup imdb -vv` -execv `{exe} -e imdb --imdblog={?q:imdb@file} -l: imdbid ! -match "\{imdbid\}" --nofq --loglevel=6 --ifhit --nobackup` --silent
#@MACRO:tvrage-clean-dupes|Erase duplicate records in tvlog; Requires glutil-1.9-9 or above:{exe} -h --tvlog={?q:tvrage@file} --preexec `{exe} --tvlog={?q:tvrage@file} --backup tvrage -vv` -execv `{exe} -e tvrage --tvlog={?q:tvrage@file} -l: basedir ! -match "\{basedir\}" --nofq --loglevel=6 --ifhit --nobackup` --silent
#@MACRO:tvrage-clean-dupes-id|Erase duplicate showid records in tvlog; Requires glutil-1.9-9 or above:{exe} -h --tvlog={?q:tvrage@file} --preexec `{exe} --tvlog={?q:tvrage@file} --backup tvrage -vv` -execv `{exe} -e tvrage --tvlog={?q:tvrage@file} ! -lom "showid=\{showid\}" --nofq --loglevel=6 --ifhit --nobackup` --silent
#
## <dirlog-clean-empty>
#
## Requires glutil-1.9-11 or above
#
## Clean dirlog records that are size 0 and
##  have no files
#
## Filters based on dirlog (not filesystem) file/size
##  information
#
## Usage:
#
#    glutil -m dirlog-clean-empty [--dirlog=file] [-arg1=<additional params>]
#
## If no path is given, glutil reverts to default 
##  (attempts extracting from glftpd.conf)
#
#@MACRO:dirlog-clean-empty|Clean dirlog records that are size 0 and have no files:{exe} -e dirlog ! -lom "size == 0 && files == 0" --nofq -vvv {arg1}
#
## <dirlog-clean-junk>
#
## Remove unecessary entries from dirlog
#
#@MACRO:dirlog-clean-junk|Remove unecessary entries from dirlog:{exe} -e dirlog -l: basedir ! -regexi "^(vobsample|sample|extras|vobsubs(s|())|subpack|proof|booklet|subs|cover(s|())|.*\(no\-(sfv|nfo)|incomplete\| complete ).*|())$" --nofq -vvv
#
## <dirlog-full-clean>
#
## Does the job of both <dirlog-clean-empty> 
##  and <dirlog-clean-junk>
#
#@MACRO:dirlog-full-clean|Does the job of both <dirlog-clean-empty> and <dirlog-clean-junk>:{exe} -e dirlog -vvvv --nofq -l: basedir ! -regexi "^(vobsample|sample|proof|extras|vobsubs(s|())|subpack|booklet|subs|cover(s|())|.*\(no\-(sfv|nfo)|incomplete\| complete ).*|())$" -and ! -lom "size=0&&files=0"
#
## <dirlog-trim>
#
## Rebuild dirlog with a limit of <maxsize> records
#
## Requires glutil-1.9-10 or above
#
## Usage:
#
#    glutil -m dirlog-trim -arg1=<maxsize>
#
#@MACRO:dirlog-trim|Rebuild dirlog with a limit of -arg1=<maxsize> records; requires glutil-1.9-10 or above:{exe} -e dirlog --maxres={arg1}  --nofq --rev -vvv
#
## <print-<log>-info>
#
## Print information about logs and does 
##  access/error checks
#
#@MACRO:dirlog-print-info|Print information about dirlog and does access/error checks:{exe} -noop --silent --preexec `if [ \{?q:dirlog@read\} -eq 0 ]; then echo "WARNING: unable to read dirlog, no read permission"; exit 1;elif [ \{?q:dirlog@read\} -eq -1 ]; then echo "WARNING: unable to access dirlog"; exit 1; fi; echo "DIRLOG: \{?q:dirlog@file\}: $(expr \{?q:dirlog@size\} \/ 1024) kB, block size: \{?q:dirlog@bsize\}"; [ \{?q:dirlog@corrupt\} -gt 0 ] && echo "WARNING: possibly corrupt dirlog detected, size is not a multiple of \{?q:dirlog@bsize\}"; [ \{?q:dirlog@write\} -eq 0 ] && echo "WARNING: no write access to dirlog"; exit 0`
#@MACRO:nukelog-print-info|Print information about nukelog and does access/error checks:{exe} -noop --silent --preexec `if [ \{?q:nukelog@read\} -eq 0 ]; then echo "WARNING: unable to read nukelog, no read permission"; exit 1;elif [ \{?q:nukelog@read\} -eq -1 ]; then echo "WARNING: unable to access nukelog"; exit 1; fi; echo "NUKELOG: \{?q:nukelog@file\}: \{?q:nukelog@size\} bytes in \{?q:nukelog@count\} records, block size: \{?q:nukelog@bsize\}"; [ \{?q:nukelog@corrupt\} -gt 0 ] && echo "WARNING: possibly corrupt nukelog detected, size is not a multiple of \{?q:nukelog@bsize\}"; [ \{?q:nukelog@write\} -eq 0 ] && echo "WARNING: no write access to nukelog"; exit 0`
#@MACRO:lastonlog-print-info|Print information about lastonlog and does access/error checks:{exe} -noop --silent --preexec `if [ \{?q:lastonlog@read\} -eq 0 ]; then echo "WARNING: unable to read lastonlog, no read permission"; exit 1;elif [ \{?q:lastonlog@read\} -eq -1 ]; then echo "WARNING: unable to access lastonlog"; exit 1; fi; echo "LASTONLOG: \{?q:lastonlog@file\}: \{?q:lastonlog@size\} bytes in \{?q:lastonlog@count\} records, block size: \{?q:lastonlog@bsize\}"; [ \{?q:lastonlog@corrupt\} -gt 0 ] && echo "WARNING: possibly corrupt lastonlog detected, size is not a multiple of \{?q:lastonlog@bsize\}"; [ \{?q:lastonlog@write\} -eq 0 ] && echo "WARNING: no write access to lastonlog"; exit 0`
#@MACRO:imdb-print-info|Print information about imdb and does access/error checks:{exe} -noop --silent --preexec `if [ \{?q:imdb@read\} -eq 0 ]; then echo "WARNING: unable to read imdb, no read permission"; exit 1;elif [ \{?q:imdb@read\} -eq -1 ]; then echo "WARNING: unable to access imdb"; exit 1; fi; echo "IMDB: \{?q:imdb@file\}: $(expr \{?q:imdb@size\} \/ 1024) kB in $(expr \{?q:imdb@size\} \/ \{?q:imdb@bsize\}) records, block size: \{?q:imdb@bsize\}"; [ \{?q:imdb@corrupt\} -gt 0 ] && echo "WARNING: size is not a multiple of \{?q:imdb@bsize\}"; [ \{?q:imdb@write\} -eq 0 ] && echo "WARNING: no write access to imdb"; exit 0`
#@MACRO:tvrage-print-info|Print information about tvrage and does access/error checks:{exe} -noop --silent --preexec `if [ \{?q:tvrage@read\} -eq 0 ]; then echo "WARNING: unable to read tvrage, no read permission"; exit 1;elif [ \{?q:tvrage@read\} -eq -1 ]; then echo "WARNING: unable to access tvrage"; exit 1; fi; echo "TVRAGE: \{?q:tvrage@file\}: \{?q:tvrage@size\} bytes in \{?q:tvrage@count\} records, block size: \{?q:tvrage@bsize\}"; [ \{?q:tvrage@corrupt\} -gt 0 ] && echo "WARNING: possibly corrupt tvrage detected, size is not a multiple of \{?q:tvrage@bsize\}"; [ \{?q:tvrage@write\} -eq 0 ] && echo "WARNING: no write access to tvrage"; exit 0`
#
## <dirlog-record-stats>
#
## Counts up files/size information from all dirlog
## records and displays
#
#@MACRO:dirlog-record-stats| Counts up files/size information from all dirlog records and displays:{exe} -d -lom "u64glob0 += size && u64glob1 += files" --postexec `echo "\{?q:dirlog@file\}: Total site size: $(expr \{u64glob0\} / 1048576)MB in \{u64glob1\} files ; $(expr \{u64glob0\} / \{?q:dirlog@count\} / 1048576)MB in $(expr \{u64glob1\} / \{?q:dirlog@count\}) files per directory on average"` --silent
#
## <mdb-record-avgstats>
#
## iMDB log - statistics - averages
#
#@MACRO:imdb-record-avgstats|IMDB - Various averaged stats:{exe} -a ( -lom "votes > 0" -and -lom "f32glob0+=score || f32glob1+=1.0 || u64glob2+=votes" ) -or -lom "u64glob0+=1||u64glob1+=year||u64glob3+=runtime" --silent -postprint "IMDB: {?q:imdb@file}: Average year/votes/score/runtime over \{u64glob0\} releases: ( \{?m:u64glob1/u64glob0\} / \{?m:u64glob2/u64glob0\} / \{?m:f32glob0/f32glob1#\%\.2f\} / \{?m:u64glob3/u64glob0\}min )" --imdblog "{?q:imdb@file}"
#@MACRO:tvrage-record-avgstats|TVRAGE - Various averaged stats:{exe} -h -lom "u64glob0+=1||u64glob1+=startyear||u64glob2+=seasons||u64glob3+=runtime" --silent -postprint "TVRAGE: \{?q:tvrage@file\}: Average year/runtime/seasons over \{u64glob0\} releases ( \{?m:u64glob1/u64glob0\} / \{?m:u64glob3/u64glob0\}min / \{?m:u64glob2/u64glob0\} )" --tvlog "{?q:tvrage@file}"
#
## iMDB log - total count statistics
#
#@MACRO:imdb-record-totalstats|iMDB log - total count statistics, dependencies\: bc:{exe} --preexec `bc --help > /dev/null || ( echo "bc not found, please install it"; exit 1 )` -a  -lom "u64glob3 += runtime && u64glob2 += votes" --postexec `echo -e "IMDB: \{?q:imdb@file\}: Total votes/runtime: \{u64glob2\} / $(echo 'scale=2; \{u64glob3\} / 60' | bc -l)hrs"` --silent
#
## <imdb-stats>
#
## iMDB log - full stats
#
#@MACRO:imdb-record-stats|iMDB log - full stats, dependencies\: bc:{exe} -noop --preexec `{exe} -m imdb-print-info; {exe} -m imdb-record-avgstats; {exe} -m imdb-record-totalstats`
#
## <logname>-edit>
#
## These are basically for editing the 
##   binary logs by hand
#
## Usage:
#
#    glutil -m edit-dirlog [-arg1=<regex>] [-arg2=<extra arguments>]
#
## -arg1 is used to select specific entries to edit
#
#@MACRO:dirlog-edit|Edit dirlog with your default text editor [-arg1=<edit-only regex>] [-arg2=<extra arguments>]:{exe} -noop --silent --preexec `if ! {exe} -q dirlog --dirlog={?q:dirlog@file} -regexi "{arg1}" {arg2} --nofq --silent; then echo "ERROR: nothing found"; exit 1; fi; {exe} -q dirlog -E {arg2} --dirlog={?q:dirlog@file} -regexi "{arg1}" > /tmp/glutil.ef.$$ ; csum() \{ cat "$1" | md5sum | cut -f 1 -d " "; \} ; osum=$(csum /tmp/glutil.ef.$$); [ -z "$EDITOR" ] && EDITOR="vi"; $EDITOR /tmp/glutil.ef.$$; if ! echo "$osum" | egrep -q "^$(csum /tmp/glutil.ef.$$)$"; then {exe} --dirlog={?q:dirlog@file} --backup dirlog -v && {exe} -e dirlog --nobackup --dirlog={?q:dirlog@file} -ff --nofq {arg2} ! -regexi "{arg1}" --silent && {exe} -z dirlog --nobackup --dirlog={?q:dirlog@file} -vvvv {arg2} < /tmp/glutil.ef.$$ || echo "ERROR: could not write record"; fi; rm /tmp/glutil.ef.$$`
#@MACRO:tvrage-edit|Edit tvlog with your default text editor [-arg1=<edit-only regex>] [-arg2=<extra arguments>]:{exe} -noop --silent --preexec `if ! {exe} -q tvrage --tvlog={?q:tvrage@file}  -regexi "{arg1}" {arg2} --nofq --silent; then echo "ERROR: nothing found"; exit 1; fi; {exe} -q tvrage -E {arg2} --tvlog={?q:tvrage@file} -regexi "{arg1}" > /tmp/glutil.ef.$$ ; csum() \{ cat "$1" | md5sum | cut -f 1 -d " "; \} ; osum=$(csum /tmp/glutil.ef.$$); [ -z "$EDITOR" ] && EDITOR="vi"; $EDITOR /tmp/glutil.ef.$$; if ! echo "$osum" | egrep -q "^$(csum /tmp/glutil.ef.$$)$"; then {exe} --tvlog={?q:tvrage@file} --backup tvrage -v && {exe} -e tvrage --nobackup --tvlog={?q:tvrage@file} -ff --nofq {arg2} ! -regexi "{arg1}" --silent && {exe} --nobackup --tvlog={?q:tvrage@file} -z tvrage -vvvv {arg2} < /tmp/glutil.ef.$$ || echo "ERROR: could not write record"; fi; rm /tmp/glutil.ef.$$`
#@MACRO:imdb-edit|Edit imdblog with your default text editor [-arg1=<edit-only regex>] [-arg2=<extra arguments>]:{exe} -noop --silent --preexec `if ! {exe}  -q imdb --imdblog={?q:imdb@file} -regexi "{arg1}" {arg2} --nofq --silent; then echo "ERROR: nothing found"; exit 1; fi; {exe} -q imdb -E {arg2} --imdblog={?q:imdb@file} -regexi "{arg1}" > /tmp/glutil.ef.$$ ; csum() \{ cat "$1" | md5sum | cut -f 1 -d " "; \} ; osum=$(csum /tmp/glutil.ef.$$); [ -z "$EDITOR" ] && EDITOR="vi"; $EDITOR /tmp/glutil.ef.$$; if ! echo "$osum" | egrep -q "^$(csum /tmp/glutil.ef.$$)$"; then {exe} --imdblog={?q:imdb@file} --backup imdb -v && {exe} -e imdb --nobackup --imdblog={?q:imdb@file} -ff --nofq {arg2} ! -regexi "{arg1}" --silent && {exe} -z imdb --nobackup --imdblog={?q:imdb@file} -vvvv {arg2} < /tmp/glutil.ef.$$ || echo "ERROR: could not write record"; fi; rm /tmp/glutil.ef.$$`
#
## <dupefile-rebuild>
#
## Rebuild the dupefile based on filesystem info
#
#@MACRO:dupefile-rebuild|Rebuild the dupefile based on filesystem info:{exe} -noop --preexec `\{exe\} --dupefile={?q:dupefile@file} --backup dupefile -vv; rm -f {?q:dupefile@file}; \{exe\} -R -x "\{siteroot\}" -lom "depth>0" -print "file \{basepath\}\{:nl\}user \{user\}\{:nl\}time \{mtime\}\{:nl\}" -lom mode=8 --glroot "{glroot}" | \{exe\} -z dupefile --nobackup -vvvv --stdin --dupefile={?q:dupefile@file}`
#
#@MACRO:clean-deadlinks|Deletes dead symlinks [-arg1=<rootpath>] [-arg2=prefix]:{exe} -x "{arg1}" -lom "depth>0" -R -lom "mode=10" -l: "(?X:(isread):(?P:rlink#{arg2}%s))" -match "0" --silent -execv "rm -f \{path\}"
#@MACRO:clean-deadlinks-rmbasedir|Deletes dead symlinks [-arg1=<rootpath>] [-arg2=prefix]:{exe} -x "{arg1}" -lom "depth>0" -R -lom "mode=10" -l: "(?X:(isread):(?P:rlink#{arg2}%s))" -match "0" --silent -exec `rm -f "\{path\}"; rmdir "\{?d:path\}"`

#@MACRO:clean-path|Deletes oldest files, exceeding <limit> GBytes [-arg1=<limit> -arg2=<path>]:{exe} -x "{arg2}" -lom "depth>0" -v --sort desc,mtime -lom "mode=8" -lom "u64glob0+=size" -lom "(u64glob0) > ({arg1}*(1024^3))" -execv "rm -f \{path\}"

#@MACRO:script-update-sh|Update script-update.sh:{exe} -noop --preexec `B="https://raw.githubusercontent.com/nixnodes/glutil/master/scripts/";D="{glroot}/bin/scripts";[ -d "$\{D\}" ] || mkdir "$\{D\}"; if curl --silent "$\{B\}"script_update.sh > "$\{D\}/script_update.sh"; then echo -e "$\{D\}/script_update.sh \t\tv$(cat "$\{D\}/script_update.sh" | egrep "^\#\@VERSION\:" | cut -d ":" -f 2).$(cat "$\{D\}/script_update.sh" | egrep "^\#\@REVISION\:" | cut -d ":" -f 2) \tOK"; chmod 755 "$\{D\}/script_update.sh"; else echo "$\{D\}/script_update.sh \tFAILED"; fi; `
