#@REVISION:41
#
## NOTE: Requires glutil 2.3.17 or higher
#
## These are basically just sets of glutil arguments and 
##  bash commands, packed into macros for convinience
#
## This file needs to be marked executable
#
## Remember, these 'macros' are nothing other than small
## bash snippets, not created to work out of the box.
## Create own macros with functionality specific to what
## you need.
#
## COMPATIBLE WITH NEWER LINUX ENVIRONMENTS ONLY!!
#
### Run with: ./glutil -m <macro name>
##
## <update-scipts>
#
## Gets glutil scripts from github repo
#
## Scripts are put into /glroot/bin/scripts,
##  folder is created if it doesn't exist
#
#@MACRO:update-scripts|Get glutil scripts from github development repo. Scripts are put into /glroot/bin/scripts, folder is created if it doesn't exist:{m:exe} noop --preexec `B="https://raw.githubusercontent.com/nixnodes/glutil/master/scripts/";D="{glroot}/bin/scripts/";[ -d "{glroot}/bin/scripts" ] || mkdir "{glroot}/bin/scripts"; if curl --silent "$B"imdb_get.sh > "$D"imdb_get.sh; then echo -e "$D"imdb_get.sh" \t\tv$(cat "$D"imdb_get.sh | grep @VERSION: | cut -d ":" -f 2).$(cat "$D"imdb_get.sh | egrep "^\#\@REVISION\:" | cut -d ":" -f 2) \tOK"; chmod 755 "$D"imdb_get.sh; else echo "$D"imdb_get.sh" FAILED"; fi; if curl --silent "$B"tvrage_get.sh > "$D"tvrage_get.sh; then echo -e "$D"tvrage_get.sh" \t\tv$(cat "$D"tvrage_get.sh | grep @VERSION: | cut -d ":" -f 2).$(cat "$D"tvrage_get.sh | egrep "^\#\@REVISION\:" | cut -d ":" -f 2) \tOK";  chmod 755 "$D"tvrage_get.sh; else echo "$D"tvrage_get.sh" FAILED"; fi;if curl --silent "$B"killslow.sh > "$D"killslow.sh; then echo -e "$D"killslow.sh" \t\tv$(cat "$D"killslow.sh | grep @VERSION: | cut -d ":" -f 2).$(cat "$D"killslow.sh | egrep "^\#\@REVISION\:" | cut -d ":" -f 2) \tOK"; chmod 755 "$D"killslow.sh; else echo "$D"killslow.sh" FAILED"; fi;if curl --silent "$B"gb_get.sh > "$D"gb_get.sh; then echo -e "$D"gb_get.sh" \t\t\tv$(cat "$D"gb_get.sh | grep @VERSION: | cut -d ":" -f 2).$(cat "$D"gb_get.sh | egrep "^\#\@REVISION\:" | cut -d ":" -f 2) \tOK"; chmod 755 "$D"gb_get.sh; else echo "$D"gb_get.sh" FAILED"; fi; if curl --silent "$B"check_incomplete.sh > "$D"check_incomplete.sh; then echo -e "$D"check_incomplete.sh" \tv$(cat "$D"check_incomplete.sh | grep @VERSION: | cut -d ":" -f 2).$(cat "$D"check_incomplete.sh | egrep "^\#\@REVISION\:" | cut -d ":" -f 2) \tOK"; chmod 755 "$D"check_incomplete.sh; else echo "$D"check_incomplete.sh" FAILED"; fi;  `
#
## <update-macro>
#
## Gets this macro file from github repo 
##  and dumps it into /glroot/bin/misc/,
##  creating the folder if needed
#
#@MACRO:update-macro|Get this macro file from github development repo and dumps it into /glroot/bin/misc/, creating the folder if needed:{m:exe} noop --preexec `B="https://raw.githubusercontent.com/nixnodes/glutil/master/misc/";D="{glroot}/bin/misc/"; [ -d "{glroot}/bin/misc" ] || mkdir "{glroot}/bin/misc"; if curl --silent "$B"macros.glutil > "$D"macros.glutil; then echo -e "$D"macros.glutil" \t\t\trev:$(cat "$D"macros.glutil | egrep "^\#\@REVISION\:" | cut -d ":" -f 2) \tOK"; else echo "$D"macros.glutil" FAILED"; fi;` 
#
## <update>
#
## Performs all updates
#
#@MACRO:update|Perform all updates:{m:exe} noop --preexec `{m:exe} -m glutil-update;{m:exe} -m update-scripts;{m:exe} -m update-self`
#
## <dirlog-update>
#
## Update directory log with new records and remove 
## records that are missing from filesystem 
#
#@MACRO:dirlog-update|Update directory log with new records and remove records that are missing from filesystem:{m:exe} -r -u --postexec "{exe} --check --fix --ghost -v {m:arg2}" {m:arg1}
#
#@MACRO:dirlog-update-skipempty|Update directory log with new records and remove records that are missing from filesystem (skip empty directories):{m:exe} -r -u --stats --lom "size = 0 && files = 0" --postexec "{exe} --check --fix --ghost -v {m:arg2}" {m:arg1}
#
## <dirlog-full-update>
#
## Update directory log with new records and remove 
## records that are missing from filesystem (full)
#
#@MACRO:dirlog-full-update|Update directory log with new records and remove records that are missing from filesystem (full):{m:exe} -r -u --stats --full --postexec "{m:exe} --check --fix --ghost -v {m:arg2}" {m:arg1}
#
#@MACRO:dirlog-full-update-skipempty|Update directory log with new records and remove records that are missing from filesystem (full) (skip empty directories):{m:exe} -r -u --stats --full --stats --lom "size = 0 && files = 0" --postexec "{m:exe} --check --fix --ghost -v {m:arg2}" {m:arg1}
#
## <dirlog-dupe>
#
## Search for duplicates in dirlog, avoiding non-releases
#
#@MACRO:dirlog-dupe|Search for duplicates in dirlog, avoiding non-releases:{m:exe} -p --regexi "basedir,(sample|proof|covers|booklet|subs|cover|CD[0-9]{1,3}|dvd[0-9]{1,3})$|.*( COMPLETE ).*" {m:arg1}
#
## <dirlog-dupe-v>
#
## Same, with progress stats
#
#@MACRO:dirlog-dupe-v|Search for duplicates in dirlog, avoiding non-releases (with progress stats):{m:exe} -p --regexi "basedir,(sample|proof|booklet|covers|subs|cover|CD[0-9]{1,3}|dvd[0-9]{1,3})$|.*( COMPLETE ).*" {m:arg1} -v
#
## <make-tvrage-dirlinks>
#
## Creates symlinks inside respective folders for every imdb/tv log record,
## erasing any existing ones first; 
#
## Examples:
#
#   ../[ TVRAGE - Scripted - Comedy,Family ] 
#   ../[ IMDB - 7.5 | 300415 - Action, Comedy, Adventure ] 
#
## Requires logs built with DATABASE_TYPE=0 (see tvrage/imdb_get.sh)
#
#@MACRO:tvrage-make-infolinks|Creates symlinks inside respective folders for every tvlog record erasing any existing ones first:{m:exe} --tvlog={m:q:tvrage@file} -h --silent --exec `rm "{glroot}{dir}/[ TVRAGE "*;ln -s "{dir}" "{glroot}{dir}/[ TVRAGE - {class} - {genres} ]"` {m:arg1}
#
## <make-imdb-dirlinks>
#
#@MACRO:imdb-make-infolinks|Creates symlinks inside respective folders for every imdblog record erasing any existing ones first:{m:exe} --imdb={m:q:imdb@file} -a --silent --exec `rm "{glroot}{dir}/[ IMDB "*;ln -s "{dir}" "{glroot}{dir}/[ IMDB - {score} | {votes} votes - {genres} ]"` {m:arg1}
#
# <dirlog-to-ascii> *DEPRECATED - added export option (-E) to glutil, see --help*
#
## Convert dirlog into ASCII format, suitable
## for re-injection using -z
#
## Requires glutil-1.9-18 or above
#
## Usage:
#
#   glutil -m dirlog-to-text -arg1=dirlog.txt [-arg2=<extra arguments>]
#
#		-arg2 is optional, adds extra glutil arguments to the 
#		 command line
#
## Convert back into binary format:
#
#   glutil -z dirlog --dirlog=dirlog.bin -vv < dirlog.txt
#
##  If --dirlog=<path> is not specified, glutil reverts to 
##   default dirlog path
#
#@MACRO:dirlog-to-ascii|Convert dirlog records into ASCII format, suitable for re-injection using -z; Arguments\: -arg1=<output file>; Requires glutil-1.9-18 or above:{m:exe} -d --dirlog={m:q:dirlog@file} --esredir={m:arg1} --execv `echo -e "dir {dir}\nstatus {status}\ntime {time}\nuser {user}\ngroup {group}\nfiles {files}\nsize {size}\n"` {m:arg2} --silent --postexec `echo "" >> {m:arg1}` 
#@MACRO:imdb-to-ascii|Convert imdblog records into ASCII format, suitable for re-injection using -z; Arguments\: -arg1=<output file>; Requires glutil-1.9-18 or above:{m:exe} -a --imdblog={m:q:imdb@file} --imdblog={imdbfile} --esredir={m:arg1} --execv `echo -e "dir {dir}\ntime {time}\nimdbid {imdbid}\nplot {plot}\nscore {score}\ngenre {genre}\nvotes {votes}\ntitle {title}\nactors {actors}\nrated {rated}\nyear {year}\nreleased {released}\nruntime {runtime}\ndirector {director}\n"` {m:arg2} --silent --postexec `echo  "" >> {m:arg1}` 
#@MACRO:tvrage-to-ascii|Convert tvlog records into ASCII format, suitable for re-injection using -z; Arguments\: -arg1=<output file>; Requires glutil-1.9-18 or above:{m:exe} -h --tvlog={m:q:tvrage@file} --esredir={m:arg1} --execv `echo -e "dir {dir}\ntime {time}\nshowid {showid}\nname {name}\nlink {link}\ncountry {country}\nairtime {airtime}\nairday {airday}\nruntime {runtime}\nstarted {started}\nended {ended}\nseasons {seasons}\nclass {class}\ngenre {genre}\nstatus {status}\nstartyear {startyear}\nendyear {endyear}\nnetwork {network}\n"` {m:arg2} --silent --postexec `echo "" >> {m:arg1}`
#
##
#@MACRO:tvrage-to-sql:{m:exe} -h --tvlog={m:q:tvrage@file} silent --execv `echo "insert into TVRAGE.shows (name, link, country, started, ended, seasons, status, runtime, airtime, airday, class, genres, showid, time, network, dir, startyear, endyear) VALUES('{name}', '{link}', '{country}', '{started}', '{ended}', '{seasons}', '{status}', '{runtime}', '{airtime}', '{airday}', '{class}', '{genres}', '{showid}', '{time}', '{network}', '{dir}', '{startyear}', '{endyear}');"` --esredir "{m:arg1}"
#
## <dirlog-clean-dupes>
#
## Erase duplicate records in dirlog
#
## The first record found is ignored, any other with
## the same base directory name are removed.
#
## Use <dirlog-clean-dupes-rm> to get rid of filesystem
## directories
#
## This can take a long time, depending on the log size
#
#@MACRO:dirlog-clean-dupes|Erase duplicate records in dirlog; Requires glutil-1.9-9 or above:{m:exe} -d --dirlog={m:q:dirlog@file} --preexec `{m:exe} --dirlog={m:q:dirlog@file} --backup dirlog -vv` -execv `{m:exe} -e dirlog --dirlog={m:q:dirlog@file} --match "basedir,{basedir}" --nofq --loglevel=6 --ifhit --nobackup` --regexi "dir,\/(sample|proof|booklet|covers|subs|cover|CD[0-9]{1,3}|dvd[0-9]{1,3})$|.*( COMPLETE ).*" --silent
#@MACRO:dupefile-clean-dupes|Erase duplicate records in dupelog; Requires glutil-1.9-9 or above:{m:exe} -i --dupefile={m:q:dupefile@file} --preexec `{m:exe} --dupefile={m:q:dupefile@file} --backup dupefile -vv` -execv `{m:exe} -e dupefile --dupefile={m:q:dupefile@file} --match "file,{file}" --nofq --loglevel=6 --ifhit --nobackup` --silent
#@MACRO:imdb-clean-dupes|Erase duplicate records in imdblog; Requires glutil-1.9-9 or above:{m:exe} -a --imdblog={m:q:imdb@file} --preexec `{m:exe} --imdblog={m:q:imdb@file} --backup imdb -vv` -execv `{m:exe} -e imdb --imdblog={m:q:imdb@file} --match "basedir,{basedir}" --nofq --loglevel=6 --ifhit --nobackup` --silent
#@MACRO:imdb-clean-dupes-id|Erase duplicate imdbID records in imdblog; Requires glutil-1.9-9 or above:{m:exe} -a --imdblog={m:q:imdb@file} --preexec `{m:exe} --imdblog={m:q:imdb@file} --backup imdb -vv` -execv `{m:exe} -e imdb --imdblog={m:q:imdb@file} --match "imdbid,{imdbid}" --nofq --loglevel=6 --ifhit --nobackup` --silent
#@MACRO:tvrage-clean-dupes|Erase duplicate records in tvlog; Requires glutil-1.9-9 or above:{m:exe} -h --tvlog={m:q:tvrage@file} --preexec `{m:exe} --tvlog={m:q:tvrage@file} --backup tvrage -vv` -execv `{m:exe} -e tvrage --tvlog={m:q:tvrage@file} --match "basedir,{basedir}" --nofq --loglevel=6 --ifhit --nobackup` --silent
#@MACRO:tvrage-clean-dupes-id|Erase duplicate showid records in tvlog; Requires glutil-1.9-9 or above:{m:exe} -h --tvlog={m:q:tvrage@file} --preexec `{m:exe} --tvlog={m:q:tvrage@file} --backup tvrage -vv` -execv `{m:exe} -e tvrage --tvlog={m:q:tvrage@file} --lom "showid={showid}" --nofq --loglevel=6 --ifhit --nobackup` --silent
#
## <dirlog-clean-empty>
#
## Requires glutil-1.9-11 or above
#
## Clean dirlog records that are size 0 and
##  have no files
#
## Filters based on dirlog (not filesystem) file/size
##  information
#
## Usage:
#
#    glutil -m dirlog-clean-empty [--dirlog=file] [-arg1=<additional params>]
#
## If no path is given, glutil reverts to default 
##  (attempts extracting from glftpd.conf)
#
#@MACRO:dirlog-clean-empty|Clean dirlog records that are size 0 and have no files:{m:exe} -e dirlog --lom "size == 0 && files == 0" --nofq -vvv {m:arg1}
#
## <dirlog-clean-junk>
#
## Remove unecessary entries from dirlog
#
#@MACRO:dirlog-clean-junk|Remove unecessary entries from dirlog:{m:exe} -e dirlog regexi "basedir,^(vobsample|sample|extras|vobsubs(s|())|subpack|proof|booklet|subs|cover(s|())|.*\(no\-(sfv|nfo)|incomplete\| complete ).*|())$" --nofq -vvv
#
## <dirlog-full-clean>
#
## Does the job of both <dirlog-clean-empty> 
##  and <dirlog-clean-junk>
#
#@MACRO:dirlog-full-clean|Does the job of both <dirlog-clean-empty> and <dirlog-clean-junk>:{m:exe} -e dirlog -vvvv --nofq regexi "basedir,^(vobsample|sample|proof|extras|vobsubs(s|())|subpack|booklet|subs|cover(s|())|.*\(no\-(sfv|nfo)|incomplete\| complete ).*|())$" or lom size=0&&files=0
#
## <dirlog-trim>
#
## Rebuild dirlog with a limit of <maxsize> records
#
## Requires glutil-1.9-10 or above
#
## Usage:
#
#    glutil -m dirlog-trim -arg1=<maxsize>
#
#@MACRO:dirlog-trim|Rebuild dirlog with a limit of -arg1=<maxsize> records; requires glutil-1.9-10 or above:{m:exe} -e dirlog --maxres={m:arg1}  --nofq --rev -vvv
#
## <print-<log>-info>
#
## Print information about logs and does 
##  access/error checks
#
#@MACRO:dirlog-print-info|Print information about dirlog and does access/error checks:{m:exe} noop --silent --preexec `if [ {q:dirlog@read} -eq 0 ]; then echo "WARNING: unable to read dirlog, no read permission"; exit 1;elif [ {q:dirlog@read} -eq -1 ]; then echo "WARNING: unable to access dirlog"; exit 1; fi; echo "DIRLOG: {q:dirlog@file}: $(expr {q:dirlog@size} \/ 1024) kB, block size: {q:dirlog@bsize}"; [ {q:dirlog@corrupt} -gt 0 ] && echo "WARNING: possibly corrupt dirlog detected, size is not a multiple of {q:dirlog@bsize}"; [ {q:dirlog@write} -eq 0 ] && echo "WARNING: no write access to dirlog"; exit 0`
#@MACRO:nukelog-print-info|Print information about nukelog and does access/error checks:{m:exe} noop --silent --preexec `if [ {q:nukelog@read} -eq 0 ]; then echo "WARNING: unable to read nukelog, no read permission"; exit 1;elif [ {q:nukelog@read} -eq -1 ]; then echo "WARNING: unable to access nukelog"; exit 1; fi; echo "NUKELOG: {q:nukelog@file}: {q:nukelog@size} bytes in {q:nukelog@count} records, block size: {q:nukelog@bsize}"; [ {q:nukelog@corrupt} -gt 0 ] && echo "WARNING: possibly corrupt nukelog detected, size is not a multiple of {q:nukelog@bsize}"; [ {q:nukelog@write} -eq 0 ] && echo "WARNING: no write access to nukelog"; exit 0`
#@MACRO:lastonlog-print-info|Print information about lastonlog and does access/error checks:{m:exe} noop --silent --preexec `if [ {q:lastonlog@read} -eq 0 ]; then echo "WARNING: unable to read lastonlog, no read permission"; exit 1;elif [ {q:lastonlog@read} -eq -1 ]; then echo "WARNING: unable to access lastonlog"; exit 1; fi; echo "LASTONLOG: {q:lastonlog@file}: {q:lastonlog@size} bytes in {q:lastonlog@count} records, block size: {q:lastonlog@bsize}"; [ {q:lastonlog@corrupt} -gt 0 ] && echo "WARNING: possibly corrupt lastonlog detected, size is not a multiple of {q:lastonlog@bsize}"; [ {q:lastonlog@write} -eq 0 ] && echo "WARNING: no write access to lastonlog"; exit 0`
#@MACRO:imdb-print-info|Print information about imdb and does access/error checks:{m:exe} noop --silent --preexec `if [ {q:imdb@read} -eq 0 ]; then echo "WARNING: unable to read imdb, no read permission"; exit 1;elif [ {q:imdb@read} -eq -1 ]; then echo "WARNING: unable to access imdb"; exit 1; fi; echo "IMDB: {q:imdb@file}: $(expr {q:imdb@size} \/ 1024) kB in $(expr {q:imdb@size} \/ {q:imdb@bsize}) records, block size: {q:imdb@bsize}"; [ {q:imdb@corrupt} -gt 0 ] && echo "WARNING: size is not a multiple of {q:imdb@bsize}"; [ {q:imdb@write} -eq 0 ] && echo "WARNING: no write access to imdb"; exit 0`
#@MACRO:tvrage-print-info|Print information about tvrage and does access/error checks:{m:exe} noop --silent --preexec `if [ {q:tvrage@read} -eq 0 ]; then echo "WARNING: unable to read tvrage, no read permission"; exit 1;elif [ {q:tvrage@read} -eq -1 ]; then echo "WARNING: unable to access tvrage"; exit 1; fi; echo "TVRAGE: {q:tvrage@file}: {q:tvrage@size} bytes in {q:tvrage@count} records, block size: {q:tvrage@bsize}"; [ {q:tvrage@corrupt} -gt 0 ] && echo "WARNING: possibly corrupt tvrage detected, size is not a multiple of {q:tvrage@bsize}"; [ {q:tvrage@write} -eq 0 ] && echo "WARNING: no write access to tvrage"; exit 0`
#
## <dirlog-record-stats>
#
## Counts up files/size information from all dirlog
## records and displays
#
#@MACRO:dirlog-record-stats| Counts up files/size information from all dirlog records and displays:{m:exe} -d --ilom "u64glob0 += size && u64glob1 += files" --postexec `echo "{q:dirlog@file}: Total site size: $(expr {u64glob0} / 1048576)MB in {u64glob1} files ; $(expr {u64glob0} / {q:dirlog@count} / 1048576)MB in $(expr {u64glob1} / {q:dirlog@count}) files per directory on average"` --silent
#
## <imdb-record-stats>
#
## iMDB log - statistics - averages
#
## Dependencies: bc
#
#@MACRO:imdb-record-avgstats|iMDB log - statistics - averages, dependencies\: bc:{m:exe} --preexec `bc --help > /dev/null || ( echo "bc not found, please install it"; exit 1 )` -a  ilom "u64glob3 += runtime && u64glob2 += votes && u64glob1 += year && f32glob0 += score && u64glob0 += 1" --postexec `echo -e "IMDB: {q:imdb@file}: Average iMDB score/year/votes/runtime: $(echo 'scale=2; {f32glob0} / {u64glob0}' | bc -l) / $(echo 'scale=3; {u64glob1} / {u64glob0}' | bc -l) / $(echo 'scale=1; {u64glob2} / {u64glob0}' | bc -l) / $(expr {u64glob3} \/ {u64glob0})min"` --silent
#
## iMDB log - total count statistics
#
## Dependencies: bc
#
#@MACRO:imdb-record-totalstats|iMDB log - total count statistics, dependencies\: bc:{m:exe} --preexec `bc --help > /dev/null || ( echo "bc not found, please install it"; exit 1 )` -a  ilom "u64glob3 += runtime && u64glob2 += votes" --postexec `echo -e "IMDB: {q:imdb@file}: Total votes/runtime: {u64glob2} / $(echo 'scale=2; {u64glob3} / 60' | bc -l)hrs"` --silent
#
## <imdb-stats>
#
## iMDB log - full stats
#
## Dependencies: bc
#
#@MACRO:imdb-record-stats|iMDB log - full stats, dependencies\: bc:{m:exe} noop --preexec `{m:exe} -m imdb-print-info; {m:exe} -m imdb-record-avgstats; {m:exe} -m imdb-record-totalstats`
#
## <<logname>-edit>
#
## These are basically for editing the 
##   binary logs by hand
#
#
## Usage:
#
#    glutil -m edit-dirlog [-arg1=<regex>] [-arg2=<extra arguments>]
#
## -arg1 is used to select specific entries to edit
#
#@MACRO:dirlog-edit|Edit dirlog with your default text editor [-arg1=<edit-only regex>] [-arg2=<extra arguments>]:{m:exe} noop silent --preexec `if ! {m:exe} -q dirlog --dirlog={m:q:dirlog@file} iregexi "{m:arg1}" {m:arg2} --nofq silent; then echo "ERROR: nothing found"; exit 1; fi; {m:exe} -q dirlog -E {m:arg2} --dirlog={m:q:dirlog@file} iregexi "{m:arg1}" > /tmp/glutil.ef.$$ ; csum() { cat "$1" | md5sum | cut -f 1 -d " "; } ; osum=$(csum /tmp/glutil.ef.$$); [ -z "$EDITOR" ] && EDITOR="vi"; $EDITOR /tmp/glutil.ef.$$; if ! echo "$osum" | egrep -q "^$(csum /tmp/glutil.ef.$$)$"; then {m:exe} --dirlog={m:q:dirlog@file} --backup dirlog -v && {m:exe} -e dirlog --nobackup --dirlog={m:q:dirlog@file} -ff --nofq {m:arg2} regexi "{m:arg1}" silent && {m:exe} -z dirlog --nobackup --dirlog={m:q:dirlog@file} -vvvv {m:arg2} < /tmp/glutil.ef.$$ || echo "ERROR: could not write record"; fi; rm /tmp/glutil.ef.$$`
#@MACRO:tvrage-edit|Edit tvlog with your default text editor [-arg1=<edit-only regex>] [-arg2=<extra arguments>]:{m:exe} noop silent --preexec `if ! {m:exe} -q tvrage --tvlog={m:q:tvrage@file}  iregexi "{m:arg1}" {m:arg2} --nofq silent; then echo "ERROR: nothing found"; exit 1; fi; {m:exe} -q tvrage -E {m:arg2} --tvlog={m:q:tvrage@file} iregexi "{m:arg1}" > /tmp/glutil.ef.$$ ; csum() { cat "$1" | md5sum | cut -f 1 -d " "; } ; osum=$(csum /tmp/glutil.ef.$$); [ -z "$EDITOR" ] && EDITOR="vi"; $EDITOR /tmp/glutil.ef.$$; if ! echo "$osum" | egrep -q "^$(csum /tmp/glutil.ef.$$)$"; then {m:exe} --tvlog={m:q:tvrage@file} --backup tvrage -v && {m:exe} -e tvrage --nobackup --tvlog={m:q:tvrage@file} -ff --nofq {m:arg2} regexi "{m:arg1}" silent && {m:exe} --nobackup --tvlog={m:q:tvrage@file} -z tvrage -vvvv {m:arg2} < /tmp/glutil.ef.$$ || echo "ERROR: could not write record"; fi; rm /tmp/glutil.ef.$$`
#@MACRO:imdb-edit|Edit imdblog with your default text editor [-arg1=<edit-only regex>] [-arg2=<extra arguments>]:{m:exe} noop silent --preexec `if ! {m:exe}  -q imdb --imdblog={m:q:imdb@file} iregexi "{m:arg1}" {m:arg2} --nofq silent; then echo "ERROR: nothing found"; exit 1; fi; {m:exe} -q imdb -E {m:arg2} --imdblog={m:q:imdb@file} iregexi "{m:arg1}" > /tmp/glutil.ef.$$ ; csum() { cat "$1" | md5sum | cut -f 1 -d " "; } ; osum=$(csum /tmp/glutil.ef.$$); [ -z "$EDITOR" ] && EDITOR="vi"; $EDITOR /tmp/glutil.ef.$$; if ! echo "$osum" | egrep -q "^$(csum /tmp/glutil.ef.$$)$"; then {m:exe} --imdblog={m:q:imdb@file} --backup imdb -v && {m:exe} -e imdb --nobackup --imdblog={m:q:imdb@file} -ff --nofq {m:arg2} regexi "{m:arg1}" silent && {m:exe} -z imdb --nobackup --imdblog={m:q:imdb@file} -vvvv {m:arg2} < /tmp/glutil.ef.$$ || echo "ERROR: could not write record"; fi; rm /tmp/glutil.ef.$$`
#
## <dupefile-rebuild>
#
## Rebuild the dupefile based on filesystem info
#
#@MACRO:dupefile-rebuild|Rebuild the dupefile based on filesystem info:{m:exe} noop --preexec `{exe} --dupefile={m:q:dupefile@file} --backup dupefile -vv; rm -f {m:q:dupefile@file}; {exe} -R -x "{siteroot}" -print "file {basepath}{:nl}user {user}{:nl}time {mtime}{:nl}" ilom mode=8 --glroot / | glutil -z dupefile -vvvv --stdin --dupefile={m:q:dupefile@file}`
