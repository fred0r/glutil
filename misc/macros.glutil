#@REVISION:25
#
## These are basically just sets of glutil arguments and 
##  bash commands, packed into macros for convinience
#
### Run with: ./glutil -m <macro name>
#
## <glutil-update>
#
## Retrieves glutil source from github and
##  compiles it (does NOT update scripts)
#
## Stores glutil.c in /glroot/bin/sources,
##  and compiles glutil binary to /glroot/bin
#
## If compilation succeeds, tries to create a symlink
##  in /bin folder, if it doesn't already exists
#
#@MACRO:glutil-update:{m:exe} noop --preexec `if curl --silent https://raw.github.com/nixnodes/glutil/master/sources/glutil.c > {glroot}/bin/sources/glutil.c ; then echo -en "glutil.c: $(expr $(stat -c %s glutil) / 1024) KB, $(cat {glroot}/bin/sources/glutil.c | wc -l) lines; compiling.. \tv$(cat {glroot}/bin/sources/glutil.c | grep "#define VER_MAJOR" | cut -d " " -f 3).$(cat {glroot}/bin/sources/glutil.c | grep "#define VER_MINOR" | cut -d " " -f 3)-$(cat {glroot}/bin/sources/glutil.c | grep "#define VER_REVISION" | cut -d " " -f 3)\t"; if cc {glroot}/bin/sources/glutil.c -o {glroot}/bin/glutil -O3 -Wall; then echo "OK"; [ -f "/bin/glutil" ] || ln -s {glroot}/bin/glutil /bin/glutil; else echo -n "\nERROR: compilation failed\n"; fi else echo "ERROR: unable to fetch glutil.c"; fi`
#
## <update-scipts>
#
## Gets glutil scripts from github repo
#
## Scripts are put into /glroot/bin/scripts,
##  folder is created if it doesn't exist
#
#@MACRO:update-scripts:{m:exe} noop --preexec `B="https://raw.github.com/nixnodes/glutil/master/scripts/";D="{glroot}/bin/scripts/";[ -d "{glroot}/bin/scripts" ] || mkdir "{glroot}/bin/scripts"; if curl --silent "$B"imdb_get.sh > "$D"imdb_get.sh; then echo -e "$D"imdb_get.sh" \t\tv$(cat "$D"imdb_get.sh | grep @VERSION: | cut -d ":" -f 2).$(cat "$D"imdb_get.sh | egrep "^\#\@REVISION\:" | cut -d ":" -f 2) \tOK"; chmod 755 "$D"imdb_get.sh; else echo "$D"imdb_get.sh" FAILED"; fi; if curl --silent "$B"tvrage_get.sh > "$D"tvrage_get.sh; then echo -e "$D"tvrage_get.sh" \t\tv$(cat "$D"tvrage_get.sh | grep @VERSION: | cut -d ":" -f 2).$(cat "$D"tvrage_get.sh | egrep "^\#\@REVISION\:" | cut -d ":" -f 2) \tOK";  chmod 755 "$D"tvrage_get.sh; else echo "$D"tvrage_get.sh" FAILED"; fi;if curl --silent "$B"killslow.sh > "$D"killslow.sh; then echo -e "$D"killslow.sh" \t\tv$(cat "$D"killslow.sh | grep @VERSION: | cut -d ":" -f 2).$(cat "$D"killslow.sh | egrep "^\#\@REVISION\:" | cut -d ":" -f 2) \tOK"; chmod 755 "$D"killslow.sh; else echo "$D"killslow.sh" FAILED"; fi;if curl --silent "$B"gb_get.sh > "$D"gb_get.sh; then echo -e "$D"gb_get.sh" \t\t\tv$(cat "$D"gb_get.sh | grep @VERSION: | cut -d ":" -f 2).$(cat "$D"gb_get.sh | egrep "^\#\@REVISION\:" | cut -d ":" -f 2) \tOK"; chmod 755 "$D"gb_get.sh; else echo "$D"gb_get.sh" FAILED"; fi; if curl --silent "$B"check_incomplete.sh > "$D"check_incomplete.sh; then echo -e "$D"check_incomplete.sh" \tv$(cat "$D"check_incomplete.sh | grep @VERSION: | cut -d ":" -f 2).$(cat "$D"check_incomplete.sh | egrep "^\#\@REVISION\:" | cut -d ":" -f 2) \tOK"; chmod 755 "$D"check_incomplete.sh; else echo "$D"check_incomplete.sh" FAILED"; fi;  `
#
## <update-self>
#
## Gets this macro file from github repo 
##  and dumps it into /glroot/bin/misc/,
##  creating the folder if needed
#
#@MACRO:update-self:{m:exe} noop --preexec `B="https://raw.github.com/nixnodes/glutil/master/misc/";D="{glroot}/bin/misc/"; [ -d "{glroot}/bin/misc" ] || mkdir "{glroot}/bin/misc"; if curl --silent "$B"macros.glutil > "$D"macros.glutil; then echo -e "$D"macros.glutil" \t\t\trev:$(cat "$D"macros.glutil | egrep "^\#\@REVISION\:" | cut -d ":" -f 2) \tOK"; else echo "$D"macros.glutil" FAILED"; fi;` 
#
## <update>
#
## Performs all updates
#
#@MACRO:update:{m:exe} noop --preexec `{m:exe} -m glutil-update;{m:exe} -m update-scripts;{m:exe} -m update-self`
#
## <dirlog-update>
#
## Update directory log with new records and remove 
## records that are missing from filesystem 
#
#@MACRO:dirlog-update:{m:exe} -r -u -v --postexec "{exe} --check --fix --ghost -v"
#
## <dupe>
#
## Search for duplicates in dirlog, avoiding non-releases
#
#@MACRO:dupe:{m:exe} -p --regexi "basedir,(sample|proof|covers|booklet|subs|cover|CD[0-9]{1,3}|dvd[0-9]{1,3})$|.*( COMPLETE ).*" {m:arg1}
#
## <dupe-v>
#
## Same, with progress stats
#
#@MACRO:dupe-v:{m:exe} -p --regexi "basedir,(sample|proof|booklet|covers|subs|cover|CD[0-9]{1,3}|dvd[0-9]{1,3})$|.*( COMPLETE ).*" {m:arg1} -v
#
## <make-tvrage-dirlinks>
#
## Creates symlinks inside respective folders for every imdb/tv log record,
## erasing any existing ones first; 
#
## Examples:
#
#   ../[ TVRAGE - Scripted - Comedy,Family ] 
#   ../[ IMDB - 7.5 | 300415 - Action, Comedy, Adventure ] 
#
## Requires logs built with DATABASE_TYPE=0 (see tvrage/imdb_get.sh)
#
#@MACRO:make-tvrage-infolinks:{m:exe} -h --silent --exec `rm "{glroot}{dir}/[ TVRAGE "*;ln -s "{dir}" "{glroot}{dir}/[ TVRAGE - {class} - {genres} ]"` {m:arg1}
#
## <make-imdb-dirlinks>
#
#@MACRO:make-imdb-infolinks:{m:exe} -a --silent --exec `rm "{glroot}{dir}/[ IMDB "*;ln -s "{dir}" "{glroot}{dir}/[ IMDB - {score} | {votes} votes - {genres} ]"` {m:arg1}
#
# <dirlog-to-ascii>
#
## Converts dirlog into ASCII format, suitable
## for re-injection using -z
#
## Requires glutil-1.9-18 or above
#
## Usage:
#
#   glutil -m dirlog-to-text -arg1=dirlog.txt [-arg2=<extra arguments>]
#
#		-arg2 is optional, adds extra glutil arguments to the 
#		 command line
#
## Convert back into binary format:
#
#   glutil -z dirlog --dirlog=dirlog.bin -vv < dirlog.txt
#
##  If --dirlog=<path> is not specified, glutil reverts to 
##   default dirlog path
#
#@MACRO:dirlog-to-ascii:{m:exe} -d --dirlog={m:q:dirlog@file} --esredir={m:arg1} --execv `echo -e "dir {dir}\nstatus {status}\ntime {time}\nuser {user}\ngroup {group}\nfiles {files}\nsize {size}\n"` {m:arg2} --silent --postexec `echo "" >> {m:arg1}` 
#@MACRO:imdb-to-ascii:{m:exe} -a --imdblog={m:q:imdb@file} --imdblog={imdbfile} --esredir={m:arg1} --execv `echo -e "dir {dir}\ntime {time}\nimdbid {imdbid}\nplot {plot}\nscore {score}\ngenre {genre}\nvotes {votes}\ntitle {title}\nactors {actors}\nrated {rated}\nyear {year}\nreleased {released}\nruntime {runtime}\ndirector {director}\n"` {m:arg2} --silent --postexec `echo  "" >> {m:arg1}` 
#@MACRO:tvrage-to-ascii:{m:exe} -h --tvlog={m:q:tvrage@file} --esredir={m:arg1} --execv `echo -e "dir {dir}\ntime {time}\nshowid {showid}\nname {name}\nlink {link}\ncountry {country}\nairtime {airtime}\nairday {airday}\nruntime {runtime}\nstarted {started}\nended {ended}\nseasons {seasons}\nclass {class}\ngenre {genre}\nstatus {status}\nstartyear {startyear}\nendyear {endyear}\nnetwork {network}\n"` {m:arg2} --silent --postexec `echo "" >> {m:arg1}`
#
## <dirlog-clean-dupes>
#
## ## Requires glutil-1.9-9
#
## Erases duplicate records in dirlog
#
## The first record found is ignored, any other with
## the same base directory name are removed.
#
## Use <dirlog-clean-dupes-rm> to get rid of filesystem
## directories
#
## This can take a long time, depending on the log size
#
#@MACRO:dirlog-clean-dupes:{m:exe} -d --dirlog={m:q:dirlog@file} --preexec `{m:exe} --dirlog={m:q:dirlog@file} --backup dirlog -vv` -execv `{m:exe} -e dirlog --dirlog={m:q:dirlog@file} --match "basedir,{basedir}" --nofq --loglevel=6 --ifhit --nobackup` --regexi "dir,\/(sample|proof|booklet|covers|subs|cover|CD[0-9]{1,3}|dvd[0-9]{1,3})$|.*( COMPLETE ).*" --silent
#@MACRO:imdb-clean-dupes:{m:exe} -a --imdblog={m:q:imdb@file} --preexec `{m:exe} --imdblog={m:q:imdb@file} --backup imdb -vv` -execv `{m:exe} -e imdb --imdblog={m:q:imdb@file} --match "basedir,{basedir}" --nofq --loglevel=6 --ifhit --nobackup` --silent
#@MACRO:imdb-clean-dupes-id:{m:exe} -a --imdblog={m:q:imdb@file} --preexec `{m:exe} --imdblog={m:q:imdb@file} --backup imdb -vv` -execv `{m:exe} -e imdb --imdblog={m:q:imdb@file} --match "imdbid,{imdbid}" --nofq --loglevel=6 --ifhit --nobackup` --silent
#@MACRO:tvrage-clean-dupes:{m:exe} -h --tvlog={m:q:tvrage@file} --preexec `{m:exe} --tvlog={m:q:tvrage@file} --backup tvrage -vv` -execv `{m:exe} -e tvrage --tvlog={m:q:tvrage@file} --match "basedir,{basedir}" --nofq --loglevel=6 --ifhit --nobackup` --silent
#@MACRO:tvrage-clean-dupes-id:{m:exe} -h --tvlog={m:q:tvrage@file} --preexec `{m:exe} --tvlog={m:q:tvrage@file} --backup tvrage -vv` -execv `{m:exe} -e tvrage --tvlog={m:q:tvrage@file} --lom "showid={showid}" --nofq --loglevel=6 --ifhit --nobackup` --silent
#
## <dirlog-clean-empty>
#
## Requires glutil-1.9-11 or above
#
## Clean dirlog records that are size 0 and
##  have no files
#
## Filters based on dirlog (not filesystem) file/size
##  information
#
## Usage:
#
#    glutil -m dirlog-clean-empty [--dirlog=file] [-arg1=<additional params>]
#
## If no path is given, glutil reverts to default 
##  (attempts extracting from glftpd.conf)
#
#@MACRO:dirlog-clean-empty:{m:exe} -e dirlog --lom "size == 0 && files == 0" --nofq -vvv {m:arg1}
#
## <dirlog-clean-junk>
#
## Remove unecessary entries from dirlog
#
#@MACRO:dirlog-clean-junk:{m:exe} -e dirlog regexi "basedir,^(vobsample|sample|extras|vobsubs(s|)|subpack|proof|booklet|subs|cover(s|)|.*\(no\-(sfv|nfo)|incomplete\| complete ).*|)$" --nofq -vvv
#
## <dirlog-full-clean>
#
## Does the job of both <dirlog-clean-empty> 
##  and <dirlog-clean-junk>
#
#@MACRO:dirlog-full-clean:{m:exe} -e dirlog -vvvv --nofq regexi "basedir,^(vobsample|sample|proof|extras|vobsubs(s|)|subpack|booklet|subs|cover(s|)|.*\(no\-(sfv|nfo)|incomplete\| complete ).*|)$" or lom size=0&&files=0
#
## <dirlog-trim>
#
## Rebuild dirlog with a limit of <maxsize> records
#
## Requires glutil-1.9-10 or above
#
## Usage:
#
#    glutil -m dirlog-trim -arg1=<maxsize>
#
#@MACRO:dirlog-trim:{m:exe} -e dirlog --maxres={m:arg1}  --nofq --rev -vvv
#
## <print-<log>-info>
#
## Prints information about logs and does 
##  access/error checks
#
#@MACRO:print-dirlog-info:{m:exe} noop --silent --preexec `if [ {q:dirlog@read} -eq 0 ]; then echo "WARNING: unable to read dirlog, no read permission"; exit 1;elif [ {q:dirlog@read} -eq -1 ]; then echo "WARNING: unable to access dirlog"; exit 1; fi; echo "DIRLOG: {q:dirlog@file}: {q:dirlog@size} bytes in {q:dirlog@count} records, block size: {q:dirlog@bsize}"; [ {q:dirlog@corrupt} -gt 0 ] && echo "WARNING: possibly corrupt dirlog detected, size is not a multiple of {q:dirlog@bsize}"; [ {q:dirlog@write} -eq 0 ] && echo "WARNING: no write access to dirlog"`
#@MACRO:print-nukelog-info:{m:exe} noop --silent --preexec `if [ {q:nukelog@read} -eq 0 ]; then echo "WARNING: unable to read nukelog, no read permission"; exit 1;elif [ {q:nukelog@read} -eq -1 ]; then echo "WARNING: unable to access nukelog"; exit 1; fi; echo "NUKELOG: {q:nukelog@file}: {q:nukelog@size} bytes in {q:nukelog@count} records, block size: {q:nukelog@bsize}"; [ {q:nukelog@corrupt} -gt 0 ] && echo "WARNING: possibly corrupt nukelog detected, size is not a multiple of {q:nukelog@bsize}"; [ {q:nukelog@write} -eq 0 ] && echo "WARNING: no write access to nukelog"`
#@MACRO:print-lastonlog-info:{m:exe} noop --silent --preexec `if [ {q:lastonlog@read} -eq 0 ]; then echo "WARNING: unable to read lastonlog, no read permission"; exit 1;elif [ {q:lastonlog@read} -eq -1 ]; then echo "WARNING: unable to access lastonlog"; exit 1; fi; echo "LASTONLOG: {q:lastonlog@file}: {q:lastonlog@size} bytes in {q:lastonlog@count} records, block size: {q:lastonlog@bsize}"; [ {q:lastonlog@corrupt} -gt 0 ] && echo "WARNING: possibly corrupt lastonlog detected, size is not a multiple of {q:lastonlog@bsize}"; [ {q:lastonlog@write} -eq 0 ] && echo "WARNING: no write access to lastonlog"`
#@MACRO:print-imdb-info:{m:exe} noop --silent --preexec `if [ {q:imdb@read} -eq 0 ]; then echo "WARNING: unable to read imdb, no read permission"; exit 1;elif [ {q:imdb@read} -eq -1 ]; then echo "WARNING: unable to access imdb"; exit 1; fi; echo "IMDB: {q:imdb@file}: {q:imdb@size} bytes in {q:imdb@count} records, block size: {q:imdb@bsize}"; [ {q:imdb@corrupt} -gt 0 ] && echo "WARNING: possibly corrupt imdb detected, size is not a multiple of {q:imdb@bsize}"; [ {q:imdb@write} -eq 0 ] && echo "WARNING: no write access to imdb"`
#@MACRO:print-tvrage-info:{m:exe} noop --silent --preexec `if [ {q:tvrage@read} -eq 0 ]; then echo "WARNING: unable to read tvrage, no read permission"; exit 1;elif [ {q:tvrage@read} -eq -1 ]; then echo "WARNING: unable to access tvrage"; exit 1; fi; echo "TVRAGE: {q:tvrage@file}: {q:tvrage@size} bytes in {q:tvrage@count} records, block size: {q:tvrage@bsize}"; [ {q:tvrage@corrupt} -gt 0 ] && echo "WARNING: possibly corrupt tvrage detected, size is not a multiple of {q:tvrage@bsize}"; [ {q:tvrage@write} -eq 0 ] && echo "WARNING: no write access to tvrage"`
#
## <edit-<logname>>
#
## These are basically for editing the 
##   binary logs by hand
#
## Usage:
#
#    glutil -m edit-dirlog [-arg1=<regex>]
#
## -arg1 is optional, used to select 
##   specific entries to edit
#
#@MACRO:edit-dirlog:{m:exe} noop silent --preexec `if ! {m:exe} -q dirlog --dirlog={m:q:dirlog@file} iregex dir,"{m:arg1}" --nofq silent; then echo "ERROR: nothing found"; exit 1; fi; {m:exe} -m dirlog-to-ascii --dirlog={m:q:dirlog@file} -arg1=/tmp/glutil.ef.$$ -arg2="iregex \"dir,{m:arg1}\""; csum() { cat "$1" | md5sum | cut -f 1 -d " "; } ; osum=$(csum /tmp/glutil.ef.$$); [ -z "$EDITOR" ] && EDITOR="vi"; $EDITOR /tmp/glutil.ef.$$; if ! echo "$osum" | egrep -q "^$(csum /tmp/glutil.ef.$$)$"; then {m:exe} --dirlog={m:q:dirlog@file} --backup dirlog -v && {m:exe} -e dirlog --nobackup --dirlog={m:q:dirlog@file} -ff --nofq regex dir,"{m:arg1}" silent && {m:exe} -z dirlog --nobackup --dirlog={m:q:dirlog@file} -vvvv < /tmp/glutil.ef.$$ || echo "ERROR: could not write record"; fi; rm /tmp/glutil.ef.$$`
#@MACRO:edit-tvrage:{m:exe} noop silent --preexec `if ! {m:exe} --tvlog={m:q:tvrage@file} -q tvrage iregex name,"{m:arg1}" --nofq silent; then echo "ERROR: nothing found"; exit 1; fi; {m:exe} -m tvrage-to-ascii --tvlog={m:q:tvrage@file} -arg1=/tmp/glutil.ef.$$ -arg2="iregex \"name,{m:arg1}\""; csum() { cat "$1" | md5sum | cut -f 1 -d " "; } ; osum=$(csum /tmp/glutil.ef.$$); [ -z "$EDITOR" ] && EDITOR="vi"; $EDITOR /tmp/glutil.ef.$$; if ! echo "$osum" | egrep -q "^$(csum /tmp/glutil.ef.$$)$"; then {m:exe} --tvlog={m:q:tvrage@file} --backup tvrage -v && {m:exe} -e tvrage --nobackup --tvlog={m:q:tvrage@file} -ff --nofq regex name,"{m:arg1}" silent && {m:exe} --nobackup --tvlog={m:q:tvrage@file} -z tvrage -vvvv < /tmp/glutil.ef.$$ || echo "ERROR: could not write record"; fi; rm /tmp/glutil.ef.$$`
#@MACRO:edit-imdb:{m:exe} noop silent --preexec `if ! {m:exe}  -q imdb --imdblog={m:q:imdb@file} iregex title,"{m:arg1}" --nofq silent; then echo "ERROR: nothing found"; exit 1; fi; {m:exe} -m imdb-to-ascii --imdblog={m:q:imdb@file} -arg1=/tmp/glutil.ef.$$ -arg2="iregex \"title,{m:arg1}\""; csum() { cat "$1" | md5sum | cut -f 1 -d " "; } ; osum=$(csum /tmp/glutil.ef.$$); [ -z "$EDITOR" ] && EDITOR="vi"; $EDITOR /tmp/glutil.ef.$$; if ! echo "$osum" | egrep -q "^$(csum /tmp/glutil.ef.$$)$"; then {m:exe} --imdblog={m:q:imdb@file} --backup imdb -v && {m:exe} -e imdb --nobackup --imdblog={m:q:imdb@file} -ff --nofq regex title,"{m:arg1}" silent && {m:exe} -z imdb --nobackup --imdblog={m:q:imdb@file} -vvvv < /tmp/glutil.ef.$$ || echo "ERROR: could not write record"; fi; rm /tmp/glutil.ef.$$`
#
